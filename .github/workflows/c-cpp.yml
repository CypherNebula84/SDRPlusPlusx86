name: Build Binaries

on:
  push:
    branches-ignore:
      - nightly
  pull_request:
    branches-ignore:
      - nightly

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build_windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Download PothosSDR
      run: Invoke-WebRequest -Uri "https://downloads.myriadrf.org/builds/PothosSDR/PothosSDR-2020.01.26-vc14-x64.exe" -OutFile ${{runner.workspace}}/pothos.exe

    - name: Install PothosSDR
      run: mkdir "C:/Program Files/PothosSDR" ; 7z x ${{runner.workspace}}/pothos.exe -o"C:/Program Files/PothosSDR/"

    - name: Download libusb
      run: Invoke-WebRequest -Uri "https://github.com/libusb/libusb/releases/download/v1.0.23/libusb-1.0.23.7z" -OutFile ${{runner.workspace}}/libusb.7z

    - name: Patch Pothos with earlier libusb version
      working-directory: ${{runner.workspace}}
      run: 7z x libusb.7z -olibusb_old ; rm "C:/Program Files/PothosSDR/bin/libusb-1.0.dll" ; cp "libusb_old/MS64/dll/libusb-1.0.dll" "C:/Program Files/PothosSDR/bin/" ; rm "C:/Program Files/PothosSDR/lib/libusb-1.0.lib" ; cp "libusb_old/MS64/dll/libusb-1.0.lib" "C:/Program Files/PothosSDR/lib/"
 
    - name: Download librtlsdr
      run: Invoke-WebRequest -Uri "https://ftp.osmocom.org/binaries/windows/rtl-sdr/rtl-sdr-64bit-20240623.zip" -OutFile ${{runner.workspace}}/rtl-sdr.zip

    - name: Patch Pothos with newer librtlsdr version
      working-directory: ${{runner.workspace}}
      run: 7z x rtl-sdr.zip ; rm "C:/Program Files/PothosSDR/bin/rtlsdr.dll" ; cp "rtl-sdr-64bit-20240623/librtlsdr.dll" "C:/Program Files/PothosSDR/bin/rtlsdr.dll"

    - name: Download SDRPlay API
      run: Invoke-WebRequest -Uri "https://www.sdrpp.org/SDRplay.zip" -OutFile ${{runner.workspace}}/SDRplay.zip

    - name: Install SDRPlay API
      run: 7z x ${{runner.workspace}}/SDRplay.zip -o"C:/Program Files/"

    - name: Download codec2
      run: git clone https://github.com/drowe67/codec2

    - name: Prepare MinGW
      run: C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "pacman --noconfirm -S --needed base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja"

    - name: Prepare build for codec2
      run: cd codec2 ; mkdir build ; cd build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "cmake .. -DCMAKE_GNUtoMS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-static-libgcc"

    - name: Build codec2
      run: cd codec2/build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c "ninja"

    - name: Install codec2
      run: mkdir "C:/Program Files/codec2" ; mkdir "C:/Program Files/codec2/include" ; mkdir "C:/Program Files/codec2/include/codec2" ; mkdir "C:/Program Files/codec2/lib" ; cd "codec2" ; xcopy "src" "C:/Program Files/codec2/include" ; cd "build" ; xcopy "src" "C:/Program Files/codec2/lib" ; xcopy "codec2" "C:/Program Files/codec2/include/codec2"

    - name: Install vcpkg dependencies
      run: vcpkg install fftw3:x64-windows glfw3:x64-windows portaudio:x64-windows zstd:x64-windows libusb:x64-windows spdlog:x64-windows

    - name: Install rtaudio
      run: git clone https://github.com/thestk/rtaudio ; cd rtaudio ; git checkout 2f2fca4502d506abc50f6d4473b2836d24cfb1e3 ; mkdir build ; cd build ; cmake .. ; cmake --build . --config Release ; cmake --install .

    - name: Install libperseus-sdr
      run: git clone https://github.com/AlexandreRouma/libperseus-sdr ; cd libperseus-sdr ; mkdir build ; cd build ; cmake -DCMAKE_BUILD_TYPE=Release "-DLIBUSB_LIBRARIES=C:/Program Files/PothosSDR/lib/libusb-1.0.lib" "-DLIBUSB_INCLUDE_DIRS=C:/Program Files/PothosSDR/include/libusb-1.0" .. "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release  ; mkdir "C:/Program Files/PothosSDR/include/perseus-sdr" ; cp Release/perseus-sdr.dll "C:/Program Files/PothosSDR/bin" ; cp Release/perseus-sdr.lib "C:/Program Files/PothosSDR/bin" ; cd .. ; xcopy "src" "C:/Program Files/PothosSDR/include/perseus-sdr"

    - name: Install librfnm
      run: git clone https://github.com/AlexandreRouma/librfnm ; cd librfnm ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release ; cmake --install .

    - name: Install libfobos
      run: git clone https://github.com/AlexandreRouma/libfobos ; cd libfobos ; mkdir build ; cd build ; cmake .. -DCMAKE_BUILD_TYPE=Release "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" ; cmake --build . --config Release ; cmake --install .

    - name: Prepare CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake -DCOPY_MSVC_REDISTRIBUTABLES=ON "$Env:GITHUB_WORKSPACE" "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config Release --verbose

    - name: Create Archive
      working-directory: ${{runner.workspace}}
      run: '&($Env:GITHUB_WORKSPACE + "/make_windows_package.ps1") ./build ($Env:GITHUB_WORKSPACE + "/root")'

    - name: Save Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_windows_x64
        path: ${{runner.workspace}}/sdrpp_windows_x64.zip

  # New job for Windows XP x86 build
  build_windows_xp_x86:
    # This requires a self-hosted runner running on Windows XP x86.
    # You would need to set up a runner with a label like 'windows-xp-x86'.
    runs-on: self-hosted # Example label; replace with your specific runner label
    # or runs-on: [self-hosted, windows, x86, xp] if you use multiple labels

    steps:
    - uses: actions/checkout@v4

    - name: Set up Environment for Windows XP x86
      # This step would involve setting up the correct Visual Studio version (e.g., VS 2005/2008 with Platform Toolset v90 or v80)
      # or a compatible MinGW toolchain for Windows XP x86.
      # You might need to add specific paths to the PATH environment variable.
      run: |
        echo "Placeholder: Set up Visual Studio/MinGW environment for Windows XP x86"
        # Example for Visual Studio 2008 (VC90) - paths may vary
        # "C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" x86
        # If using MinGW, ensure it's in your PATH
        # set PATH=%PATH%;C:\MinGW\bin

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    # The following steps need to be adjusted for Windows XP x86 compatibility.
    # This includes finding x86 versions of dependencies, or building them from source for x86.
    # PothosSDR, libusb, librtlsdr, SDRPlay, vcpkg dependencies will likely need x86 versions
    # or need to be built specifically for x86 and Windows XP's older API/runtime.

    - name: Download PothosSDR (x86 version)
      # You'll need to find or build an x86 version of PothosSDR compatible with Windows XP.
      # This URL is for x64, it won't work directly.
      run: |
        echo "Placeholder: Download/install PothosSDR x86 compatible with Windows XP"
        # Invoke-WebRequest -Uri "URL_TO_POTHOSSDR_XP_X86_VERSION.exe" -OutFile ${{runner.workspace}}/pothos_xp_x86.exe
        # 7z x ${{runner.workspace}}/pothos_xp_x86.exe -o"C:/Program Files/PothosSDR_XP_x86/"

    - name: Download libusb (x86 for XP)
      # You'll need an x86 version of libusb compatible with Windows XP.
      run: |
        echo "Placeholder: Download/install libusb x86 compatible with Windows XP"
        # Invoke-WebRequest -Uri "URL_TO_LIBUSB_XP_X86_VERSION.7z" -OutFile ${{runner.workspace}}/libusb_xp_x86.7z
        # 7z x ${{runner.workspace}}/libusb_xp_x86.7z -olibusb_xp_old

    - name: Patch Pothos with earlier libusb version (x86 for XP)
      working-directory: ${{runner.workspace}}
      run: |
        echo "Placeholder: Patch Pothos with libusb x86"
        # Adjust paths and filenames for x86 versions
        # rm "C:/Program Files/PothosSDR_XP_x86/bin/libusb-1.0.dll"
        # cp "libusb_xp_old/MS32/dll/libusb-1.0.dll" "C:/Program Files/PothosSDR_XP_x86/bin/"
        # rm "C:/Program Files/PothosSDR_XP_x86/lib/libusb-1.0.lib"
        # cp "libusb_xp_old/MS32/dll/libusb-1.0.lib" "C:/Program Files/PothosSDR_XP_x86/lib/"

    - name: Download librtlsdr (x86 for XP)
      # You'll need an x86 version of librtlsdr compatible with Windows XP.
      run: |
        echo "Placeholder: Download/install librtlsdr x86 compatible with Windows XP"
        # Invoke-WebRequest -Uri "URL_TO_RTL_SDR_XP_X86_VERSION.zip" -OutFile ${{runner.workspace}}/rtl-sdr_xp_x86.zip

    - name: Patch Pothos with newer librtlsdr version (x86 for XP)
      working-directory: ${{runner.workspace}}
      run: |
        echo "Placeholder: Patch Pothos with librtlsdr x86"
        # Adjust paths and filenames for x86 versions
        # 7z x rtl-sdr_xp_x86.zip
        # rm "C:/Program Files/PothosSDR_XP_x86/bin/rtlsdr.dll"
        # cp "rtl-sdr-x86-DATE/librtlsdr.dll" "C:/Program Files/PothosSDR_XP_x86/bin/rtlsdr.dll"

    - name: Download SDRPlay API (x86 for XP)
      # SDRPlay might not have official XP x86 support. This could be a blocker.
      run: |
        echo "Placeholder: Download/install SDRPlay API x86 compatible with Windows XP"
        # Invoke-WebRequest -Uri "URL_TO_SDRPLAY_XP_X86_VERSION.zip" -OutFile ${{runner.workspace}}/SDRplay_xp_x86.zip
        # 7z x ${{runner.workspace}}/SDRplay_xp_x86.zip -o"C:/Program Files/"

    - name: Download codec2
      run: git clone https://github.com/drowe67/codec2

    - name: Prepare MinGW (for x86 on XP)
      # You'd need a MinGW version capable of targeting Windows XP and generating 32-bit binaries.
      # The `msys2_shell.cmd` commands are for x64.
      run: |
        echo "Placeholder: Prepare MinGW for x86 build targeting Windows XP"
        # C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw32 -c "pacman --noconfirm -S --needed base-devel mingw-w64-i686-toolchain mingw-w64-i686-cmake mingw-w64-i686-ninja"

    - name: Prepare build for codec2 (x86)
      run: |
        cd codec2 ; mkdir build ; cd build
        echo "Placeholder: CMake for codec2 x86"
        # C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw32 -c "cmake .. -DCMAKE_GNUtoMS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-static-libgcc"

    - name: Build codec2 (x86)
      run: |
        cd codec2/build
        echo "Placeholder: Build codec2 x86"
        # C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw32 -c "ninja"

    - name: Install codec2 (x86)
      run: |
        echo "Placeholder: Install codec2 x86"
        # Adjust paths and copy operations for x86
        # mkdir "C:/Program Files/codec2_xp_x86"
        # ... similar copy commands for x86 ...

    - name: Install vcpkg dependencies (x86 for XP)
      # Vcpkg might not support building for Windows XP directly or have compatible triplets.
      # You might need to manually compile these libraries for Windows XP x86.
      run: |
        echo "Placeholder: Install vcpkg dependencies for x86-windows-xp or manual build"
        # vcpkg install fftw3:x86-windows-xp glfw3:x86-windows-xp ... (if such triplets exist/work)
        # Otherwise, manual build steps for each dependency.

    - name: Install rtaudio (x86)
      run: |
        echo "Placeholder: Build rtaudio for x86 on XP"
        # Adjust build commands for x86 and XP compatibility.

    - name: Install libperseus-sdr (x86 for XP)
      run: |
        echo "Placeholder: Build libperseus-sdr for x86 on XP"
        # Adjust build commands and library paths for x86 and XP compatibility.
        # "-DLIBUSB_LIBRARIES=C:/Program Files/PothosSDR_XP_x86/lib/libusb-1.0.lib"
        # "-DLIBUSB_INCLUDE_DIRS=C:/Program Files/PothosSDR_XP_x86/include/libusb-1.0"
        # Use x86-windows triplet if vcpkg is used.

    - name: Install librfnm (x86 for XP)
      run: |
        echo "Placeholder: Build librfnm for x86 on XP"
        # Adjust build commands for x86 and XP compatibility.

    - name: Install libfobos (x86 for XP)
      run: |
        echo "Placeholder: Build libfobos for x86 on XP"
        # Adjust build commands for x86 and XP compatibility.

    - name: Prepare CMake (x86 for XP)
      working-directory: ${{runner.workspace}}/build
      run: |
        echo "Placeholder: CMake for Windows XP x86"
        # You'll need to specify the correct generator and toolset for XP.
        # For MSVC, this would be something like -G "Visual Studio 9 2008" -A Win32 or -G "NMake Makefiles" with vcvarsall.bat.
        # For MinGW, ensure the correct x86 MinGW environment is active.
        # Adjust vcpkg toolchain file path if different for x86-windows-xp.
        cmake -DCOPY_MSVC_REDISTRIBUTABLES=ON "$Env:GITHUB_WORKSPACE" "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -A Win32 -T v140_xp # Example for VS 2015 targeting XP, actual might be older
        # Or for MinGW: cmake -G "MinGW Makefiles" "$Env:GITHUB_WORKSPACE" ...

    - name: Build (x86 for XP)
      working-directory: ${{runner.workspace}}/build
      run: |
        echo "Placeholder: Build for Windows XP x86"
        cmake --build . --config Release --verbose

    - name: Create Archive (x86 for XP)
      working-directory: ${{runner.workspace}}
      run: |
        echo "Placeholder: Create Windows XP x86 archive"
        # Adjust the packaging script if needed for x86 output.
        # '&($Env:GITHUB_WORKSPACE + "/make_windows_package.ps1") ./build ($Env:GITHUB_WORKSPACE + "/root")'
        # Rename the output archive
        # mv sdrpp_windows_x64.zip sdrpp_windows_xp_x86.zip

    - name: Save Archive (x86 for XP)
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_windows_xp_x86
        path: ${{runner.workspace}}/sdrpp_windows_xp_x86.zip

  build_macos_intel:
    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install dependencies
      run: brew install pkg-config libusb fftw glfw airspy airspyhf portaudio hackrf libbladerf codec2 zstd autoconf automake libtool spdlog && pip3 install mako

    - name: Install volk
      run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    - name: Install SDRplay API
      run: wget https://www.sdrplay.com/software/SDRplayAPI-macos-installer-universal-3.15.0.pkg && sudo installer -pkg SDRplayAPI-macos-installer-universal-3.15.0.pkg -target /

    - name: Install libiio
      run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    - name: Install libad9361
      run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    - name: Install LimeSuite
      run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    - name: Install libperseus
      run: git clone https://github.com/Microtelecom/libperseus-sdr && cd libperseus-sdr && autoreconf -i && ./configure --prefix=/usr/local && make && sudo make install && cd ..

    - name: Install librfnm
      run: git clone https://github.com/AlexandreRouma/librfnm && cd librfnm && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

    - name: Install libfobos
      run: git clone https://github.com/AlexandreRouma/libfobos && cd libfobos && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

    - name: Install more recent librtlsdr
      run: git clone https://github.com/osmocom/rtl-sdr && cd rtl-sdr && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

    - name: Prepare CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=OFF -DOPT_BUILD_PORTAUDIO_SINK=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_AUDIO_SOURCE=OFF -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON -DUSE_BUNDLE_DEFAULTS=ON -DCMAKE_BUILD_TYPE=Release

    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: make VERBOSE=1 -j3

    - name: Create Archive
      working-directory: ${{runner.workspace}}
      run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++.app && zip -r ${{runner.workspace}}/sdrpp_macos_intel.zip SDR++.app

    - name: Save Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_macos_intel
        path: ${{runner.workspace}}/sdrpp_macos_intel.zip

  build_macos_arm:
    runs-on: macos-14

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install dependencies
      run: brew install pkg-config libusb fftw glfw airspy airspyhf portaudio hackrf libbladerf codec2 zstd autoconf automake libtool spdlog && pip3 install mako --break-system-packages

    - name: Install volk
      run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    - name: Install SDRplay API
      run: wget https://www.sdrplay.com/software/SDRplayAPI-macos-installer-universal-3.15.0.pkg && sudo installer -pkg SDRplayAPI-macos-installer-universal-3.15.0.pkg -target /

    - name: Install libiio
      run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    - name: Install libad9361
      run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    - name: Install LimeSuite
      run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

    # - name: Install libperseus
    #   run: git clone https://github.com/Microtelecom/libperseus-sdr && cd libperseus-sdr && autoreconf -i && ./configure --prefix=/usr/local && make && make install && cd ..

    - name: Install librfnm
      run: git clone https://github.com/AlexandreRouma/librfnm && cd librfnm && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

    - name: Install libfobos
      run: git clone https://github.com/AlexandreRouma/libfobos && cd libfobos && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make && sudo make install && cd ..

    - name: Install more recent librtlsdr
      run: git clone https://github.com/osmocom/rtl-sdr && cd rtl-sdr && mkdir build && cd build && cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_BUILD_TYPE=Release .. && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

    - name: Prepare CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=OFF -DOPT_BUILD_PORTAUDIO_SINK=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=OFF -DOPT_BUILD_PERSEUS_SOURCE=OFF -DOPT_BUILD_AUDIO_SOURCE=OFF -DOPT_BUILD_RFNM_SOURCE=ON -DOPT_BUILD_FOBOSSDR_SOURCE=ON -DUSE_BUNDLE_DEFAULTS=ON -DCMAKE_BUILD_TYPE=Release

    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: make VERBOSE=1 -j3

    - name: Create Archive
      working-directory: ${{runner.workspace}}
      run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++.app && zip -r ${{runner.workspace}}/sdrpp_macos_arm.zip SDR++.app

    - name: Save Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_macos_arm
        path: ${{runner.workspace}}/sdrpp_macos_arm.zip

  build_debian_buster_amd64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/debian_buster && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_debian_buster_amd64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_debian_buster_aarch64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4

    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/debian_buster && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_debian_buster_aarch64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_debian_bullseye_amd64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/debian_bullseye && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_debian_bullseye_amd64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_debian_bullseye_aarch64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/debian_bullseye && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_debian_bullseye_aarch64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_debian_bookworm_amd64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/debian_bookworm && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_debian_bookworm_amd64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_debian_bookworm_aarch64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/debian_bookworm && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_debian_bookworm_aarch64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_debian_sid_amd64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/debian_sid && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_debian_sid_amd64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_debian_sid_aarch64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/debian_sid && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_debian_sid_aarch64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_ubuntu_focal_amd64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_focal && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_ubuntu_focal_amd64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_ubuntu_focal_aarch64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_focal && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_ubuntu_focal_aarch64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_ubuntu_jammy_amd64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_jammy && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_ubuntu_jammy_amd64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_ubuntu_jammy_aarch64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_jammy && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_ubuntu_jammy_aarch64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_ubuntu_noble_amd64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_noble && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_ubuntu_noble_amd64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_ubuntu_noble_aarch64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_noble && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_ubuntu_noble_aarch64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_ubuntu_oracular_amd64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_oracular && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_ubuntu_oracular_amd64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_ubuntu_oracular_aarch64:
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v4
      
    - name: Create Docker Image
      run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_oracular && docker build . --tag sdrpp_build

    - name: Run Container
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO="-$GITHUB_RUN_NUMBER" sdrpp_build /root/do_build.sh

    - name: Recover Deb Archive
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_ubuntu_oracular_aarch64
        path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

  build_raspios_bullseye_armhf:
    runs-on: ARM

    steps:
    - uses: actions/checkout@v4

    - name: Create Build Environment
      run: rm -rf ${{runner.workspace}}/build && cmake -E make_directory ${{runner.workspace}}/build
      
    - name: Prepare CMake
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_USRP_SOURCE=ON -DOPT_BUILD_PERSEUS_SOURCE=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: make VERBOSE=1 -j3

    - name: Create Dev Archive
      working-directory: ${{runner.workspace}}
      run: sh $GITHUB_WORKSPACE/make_debian_package.sh ./build 'libfftw3-dev, libglfw3-dev, libvolk2-dev, librtaudio-dev' && mv sdrpp_debian_amd64.deb sdrpp_debian_armhf.deb
      
    - name: Save Deb Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_raspios_bullseye_armhf
        path: ${{runner.workspace}}/sdrpp_debian_armhf.deb

  build_android:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Fetch container
      working-directory: ${{runner.workspace}}
      run: git clone https://github.com/AlexandreRouma/android-sdr-kit
      
    - name: Build container
      working-directory: ${{runner.workspace}}/android-sdr-kit
      run: docker build --progress=plain -t android-sdr-kit .

    - name: Build
      run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus android-sdr-kit /bin/bash -l -c "cd /root/SDRPlusPlus/android && gradle --info assembleDebug"

    - name: Recover APK
      working-directory: ${{runner.workspace}}
      run: docker cp build:/root/SDRPlusPlus/android/app/build/outputs/apk/debug/app-debug.apk ./ && mv app-debug.apk sdrpp.apk

    - name: Save APK
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_android
        path: ${{runner.workspace}}/sdrpp.apk

  create_full_archive:
    needs: [
      'build_windows',
      'build_windows_xp_x86', # Added Windows XP x86 job here
      'build_macos_intel',
      'build_macos_arm',
      'build_debian_buster_amd64',
      'build_debian_buster_aarch64',
      'build_debian_bullseye_amd64',
      'build_debian_bullseye_aarch64',
      'build_debian_bookworm_amd64',
      'build_debian_bookworm_aarch64',
      'build_debian_sid_amd64',
      'build_debian_sid_aarch64',
      'build_ubuntu_focal_amd64',
      'build_ubuntu_focal_aarch64',
      'build_ubuntu_jammy_amd64',
      'build_ubuntu_jammy_aarch64',
      'build_ubuntu_noble_amd64',
      'build_ubuntu_noble_aarch64',
      'build_ubuntu_oracular_amd64',
      'build_ubuntu_oracular_aarch64',
      'build_raspios_bullseye_armhf',
      'build_android'
    ]
    runs-on: ubuntu-latest

    steps:
    - name: Download All Builds
      uses: actions/download-artifact@v4

    - name: Create Archive
      run: >
        mkdir sdrpp_all && 
        mv sdrpp_windows_x64/sdrpp_windows_x64.zip sdrpp_all/ && 
        mv sdrpp_windows_xp_x86/sdrpp_windows_xp_x86.zip sdrpp_all/ && # Added Windows XP x86 artifact move
        mv sdrpp_macos_intel/sdrpp_macos_intel.zip sdrpp_all/ && 
        mv sdrpp_macos_arm/sdrpp_macos_arm.zip sdrpp_all/ && 
        mv sdrpp_debian_buster_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_buster_amd64.deb && 
        mv sdrpp_debian_buster_aarch64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_buster_aarch64.deb && 
        mv sdrpp_debian_bullseye_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_bullseye_amd64.deb &&
        mv sdrpp_debian_bullseye_aarch64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_bullseye_aarch64.deb &&
        mv sdrpp_debian_bookworm_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_bookworm_amd64.deb && 
        mv sdrpp_debian_bookworm_aarch64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_bookworm_aarch64.deb && 
        mv sdrpp_debian_sid_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_sid_amd64.deb && 
        mv sdrpp_debian_sid_aarch64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_sid_aarch64.deb && 
        mv sdrpp_ubuntu_focal_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_focal_amd64.deb &&
        mv sdrpp_ubuntu_focal_aarch64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_focal_aarch64.deb &&
        mv sdrpp_ubuntu_jammy_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_jammy_amd64.deb &&
        mv sdrpp_ubuntu_jammy_aarch64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_jammy_aarch64.deb &&
        mv sdrpp_ubuntu_noble_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_noble_amd64.deb &&
        mv sdrpp_ubuntu_noble_aarch64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_noble_aarch64.deb &&
        mv sdrpp_ubuntu_oracular_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_oracular_amd64.deb &&
        mv sdrpp_ubuntu_oracular_aarch64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_oracular_aarch64.deb &&
        mv sdrpp_raspios_bullseye_armhf/sdrpp_debian_armhf.deb sdrpp_all/sdrpp_raspios_bullseye_armhf.deb &&
        mv sdrpp_android/sdrpp.apk sdrpp_all/sdrpp.apk &&
        zip -r sdrpp_all.zip sdrpp_all

    - name: Upload Full Archive
      uses: actions/upload-artifact@v4
      with:
        name: sdrpp_all_builds
        path: ${{runner.workspace}}/sdrpp_all.zip

  update_nightly_release:
    needs: [create_full_archive]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

    steps:
    - name: Download All Builds
      uses: actions/download-artifact@v4

    - name: Update Nightly
      # The `sdrpp_all/*` pattern should include the new XP artifact automatically
      run: gh release upload nightly sdrpp_all/* -R ${{github.repository}} --clobber

  check_spelling:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install codespell
      run: sudo apt update -y && sudo apt install -y codespell
      
    - name: Running codespell
      run: cd $GITHUB_WORKSPACE && codespell -q 2 || true

  check_formatting:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Run check_clang_format
      run: cd $GITHUB_WORKSPACE && chmod +x ./check_clang_format.sh && ./check_clang_format.sh || true
